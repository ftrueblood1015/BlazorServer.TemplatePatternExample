@using BlazorServer.TemplatePatternExample.Services
@using TemplatePatternExample.Domain.Models;
@using TemplatePatternExample.Pages._Components;
@typeparam T where T : Employee, new()

<MudText @attributes='Splats.PageHeader($"new{Title}")'>@Title</MudText>

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="Form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudCheckBox @bind-Checked="@Entity!.IsActive" @attributes='Splats.CheckBox("Active")'></MudCheckBox>
                    <MudTextField @bind-Value="@Entity!.Name" @attributes='Splats.TextRequired("Name")' />
                    <MudTextField @bind-Value="@Entity!.Department" @attributes='Splats.TextRequired("Department")' />
                    <ModelBaseSelect T="Manager" Title="Managers" BoundValue="Entity.ManagerId" HandleChange="ManagerChange"></ModelBaseSelect>
                    <MudTextField @bind-Value="@Entity!.Description" @attributes='Splats.TextAreaRequired("Description")' />
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton @attributes="Splats.NewButton()" OnClick="Save">Save</MudButton>
                <MudButton @attributes="Splats.ResetButton()" OnClick="@(()=>Form!.ResetAsync())" Class="mx-2">Reset</MudButton>
                <MudButton @attributes="Splats.CancelButton()" OnClick="CancelClick">Cancel</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Inject]
    private IServiceBase<T>? Service { get; set; }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    [Inject]
    private ISnackbar? SnackbarService { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? CancelRoute { get; set; }

    [Parameter]
    public int EntityId { get; set; }

    private T? Entity { get; set; }

    private bool success;

    private string[] errors = { };

    private MudForm? Form;

    protected override async Task OnInitializedAsync()
    {
        SetEntity();
    }

    public void SetEntity()
    {
        if (EntityId == 0)
        {
            Entity = new T() { IsActive = true };
        }
        else
        {
            Entity = GetEntity(EntityId);
        }
    }

    private void CancelClick()
    {
        if (NavigationManager != null)
        {
            NavigationManager.NavigateTo($"/{CancelRoute}");
        }
    }

    private async void Save()
    {
        success = false;
        await Form!.Validate();

        if (!Form!.IsValid)
        {
            ShowSnackbarMessage($"Form Is Invalid, see errors", Color.Error);
            return;
        }

        if (Service == null)
        {
            throw new ArgumentNullException(nameof(Service));
        }

        if (EntityId == 0)
        {
            Add(Entity!);
        }
        else
        {
            Update(Entity!);
        }
    }

    private void Add(T Entity)
    {
        try
        {
            Entity = Service!.Add(Entity!);
            success = true;
            StateHasChanged();
            ShowSnackbarMessage($"Added New {Title}", Color.Success);
            CancelClick();
        }
        catch
        {
            success = false;
            ShowSnackbarMessage($"Could Not Add {Title}", Color.Error);
        }

    }

    private void Update(T Entity)
    {
        try
        {
            Entity = Service!.Update(Entity!);
            success = true;
            StateHasChanged();
            ShowSnackbarMessage($"Updated New {Title}", Color.Success);
            CancelClick();
        }
        catch
        {
            success = false;
            ShowSnackbarMessage($"Could Not Update {Title}", Color.Error);
        }

    }

    public T GetEntity(int Id)
    {
        if (Service == null)
        {
            throw new ArgumentNullException(nameof(Service));
        }

        return Service.GetById(Id) ?? new T() { };
    }

    public void ShowSnackbarMessage(string Message, MudBlazor.Color Color)
    {
        if (SnackbarService == null)
        {
            throw new ArgumentNullException(nameof(SnackbarService));
        }

        SnackbarService.Add<MudChip>(new Dictionary<string, object>() {
            { "Text", $"{Message}" },
            { "Color", Color }
        });
    }

    public async Task ManagerChange(int? Id)
    {
        Entity!.ManagerId = Id;
    }
}
